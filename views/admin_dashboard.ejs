<%- include('partials/header', { title: 'Admin Dashboard' }) %>

<link rel="stylesheet" href="/css/admin_dashboard.css">

<div class="card mb-4" style="margin-top: 60px;">
    <div class="card-header">
        <button class="btn btn-link text-decoration-none text-dark w-100 text-start p-0" type="button" data-bs-toggle="collapse" data-bs-target="#configCollapse" aria-expanded="false" aria-controls="configCollapse">
            <h1 class="mb-0">Configuration <small class="text-muted">(click to expand)</small></h1>
        </button>
    </div>
    <div class="collapse" id="configCollapse">
        <div class="card-body">
        <div class="row align-items-center">
            <div class="col-md-4">
                <label for="spotOffset" class="form-label">Spot Normalisation % Offset:</label>
            </div>
            <div class="col-md-3">
                <div class="input-group">
                    <input type="number" class="form-control" id="spotOffset" value="<%= spotNormalisationOffset %>" step="0.01" min="0" max="100">
                    <span class="input-group-text">%</span>
                </div>
            </div>
            <div class="col-md-5">
                <button type="button" id="updateOffsetBtn" class="btn btn-warning">Update Offset</button>
                <div id="offset-message" class="mt-2"></div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-12">
                <small class="text-muted">This offset will be applied to all spot prices before displaying or updating quotes.</small>
            </div>
        </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">
        <button class="btn btn-link text-decoration-none text-dark w-100 text-start p-0" type="button" data-bs-toggle="collapse" data-bs-target="#spotPriceCollapse" aria-expanded="false" aria-controls="spotPriceCollapse">
            <h1 class="mb-0">Spot Price <small class="text-muted">(click to expand)</small></h1>
        </button>
    </div>
    <div class="collapse" id="spotPriceCollapse">
        <div class="card-body">
            <div class="row spot-price-display">
                <div class="col-6">
                    <p>1 Troy Oz Gold:</p>
                    <p>1 Troy Oz Silver:</p>
                    <p>1 gram Gold:</p>
                    <p>1 gram Silver:</p>
                    <p class="mt-3 last-updated-text"><i>Last Updated: <span id="spot-last-updated">Not yet loaded</span></i></p>
                    <div id="spot-price-error" class="text-danger mt-2"></div>
                    <div class="mt-3">
                        <button type="button" id="refresh-spot-price-btn" class="btn btn-info">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            Update Live Price
                        </button>
                    </div>
                </div>
                <div class="col-6">
                    <p>$<span id="spot-gold-oz-price">-</span> <span class="currency-unit">NZD</span></p>
                    <p>$<span id="spot-silver-oz-price">-</span> <span class="currency-unit">NZD</span></p>
                    <p>$<span id="spot-gold-g-price">-</span> <span class="currency-unit">NZD</span></p>
                    <p>$<span id="spot-silver-g-price">-</span> <span class="currency-unit">NZD</span></p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h1>Admin Dashboard - All Quotes</h1>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by mobile or email...">
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover admin-table" id="quotesTable">
                <thead class="table-dark">
                    <tr>
                        <th class="col-quote-number">Quote Number</th>
                        <th class="col-items">Items</th>
                        <th class="col-mobile">Mobile</th>
                        <th class="col-email">Email</th>
                        <th class="col-customer">Created At</th>
                        <th class="col-actions">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if(quotes.length > 0) { %>
                        <% quotes.forEach(quote => { %>
                            <tr>
                                <td class="col-quote-number"><%= quote.quote_number %></td>
                                <td class="col-items"><%= quote.items %></td>
                                <td class="col-mobile"><%= quote.customer_mobile || '-' %></td>
                                <td class="col-email"><%= quote.customer_email || '-' %></td>
                                <td class="col-customer"><%= new Date(quote.created_at).toLocaleString() %></td>
                                <td class="col-actions">
                                    <a href="/quote/edit/<%= quote.id %>" class="btn btn-sm btn-secondary">Display View</a>
                                    <a href="/admin/<%= quote.id %>" class="btn btn-sm btn-primary">Admin View</a>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center">No quotes found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Search functionality
    const searchInput = document.getElementById('searchInput');
    const table = document.getElementById('quotesTable');
    const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

    searchInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();

        Array.from(rows).forEach(row => {
            // Skip the "no quotes" row
            if (row.cells.length === 1) return;

            const mobile = row.cells[2].textContent.toLowerCase();
            const email = row.cells[3].textContent.toLowerCase();

            if (mobile.includes(searchTerm) || email.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    // Spot price update functionality
    const refreshSpotPriceBtn = document.getElementById('refresh-spot-price-btn');
    const spotPriceErrorDiv = document.getElementById('spot-price-error');

    if (refreshSpotPriceBtn) {
        refreshSpotPriceBtn.addEventListener('click', async () => {
            const spinner = refreshSpotPriceBtn.querySelector('.spinner-border');

            refreshSpotPriceBtn.disabled = true;
            spinner.classList.remove('d-none');
            spotPriceErrorDiv.textContent = '';

            try {
                const response = await fetch('/quote/get-live-prices');

                if (!response.ok) {
                    throw new Error('Failed to fetch latest prices from the server.');
                }

                const data = await response.json();

                document.getElementById('spot-gold-oz-price').textContent = Number(data.gold_ounce_nzd).toFixed(2);
                document.getElementById('spot-gold-g-price').textContent = Number(data.gold_gram_nzd).toFixed(2);
                document.getElementById('spot-silver-oz-price').textContent = Number(data.silver_ounce_nzd).toFixed(2);
                document.getElementById('spot-silver-g-price').textContent = Number(data.silver_gram_nzd).toFixed(2);
                document.getElementById('spot-last-updated').textContent = new Date().toLocaleString();

            } catch (error) {
                console.error('Error updating spot prices:', error);
                spotPriceErrorDiv.textContent = 'Error: Could not update live prices. Please try again.';
            } finally {
                refreshSpotPriceBtn.disabled = false;
                spinner.classList.add('d-none');
            }
        });
    }

    // Configuration update functionality
    const updateBtn = document.getElementById('updateOffsetBtn');
    const offsetInput = document.getElementById('spotOffset');
    const messageDiv = document.getElementById('offset-message');

    updateBtn.addEventListener('click', async () => {
        const newOffset = parseFloat(offsetInput.value);
        
        // Validate input
        if (isNaN(newOffset) || newOffset < 0 || newOffset > 100) {
            messageDiv.innerHTML = '<span class="text-danger">Please enter a valid percentage between 0 and 100.</span>';
            return;
        }

        // Show confirmation dialog
        const confirmed = confirm(
            `WARNING: This will affect all spot price calculations.\n\n` +
            `Current offset: <%= spotNormalisationOffset %>%\n` +
            `New offset: ${newOffset}%\n\n` +
            `Are you sure you want to update the Spot Normalisation Offset?`
        );

        if (!confirmed) {
            return;
        }

        // Show loading state
        updateBtn.disabled = true;
        updateBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';
        messageDiv.innerHTML = '';

        try {
            const response = await fetch('/admin/settings/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    spot_normalisation_offset: newOffset.toString()
                })
            });

            const data = await response.json();

            if (data.success) {
                messageDiv.innerHTML = '<span class="text-success">✓ Offset updated successfully! The new offset will be applied to all future spot price calculations.</span>';
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                messageDiv.innerHTML = `<span class="text-danger">Error: ${data.error}</span>`;
            }
        } catch (error) {
            console.error('Error updating offset:', error);
            messageDiv.innerHTML = '<span class="text-danger">Error: Failed to update offset. Please try again.</span>';
        } finally {
            updateBtn.disabled = false;
            updateBtn.innerHTML = 'Update Offset';
        }
    });
});
</script>

<%- include('partials/footer') %>
